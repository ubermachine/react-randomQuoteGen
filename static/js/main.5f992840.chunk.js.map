{"version":3,"sources":["components/quotes.js","App.js","serviceWorker.js","index.js"],"names":["quotesData","i","Quotes","props","handleClick","bind","getQuotes","handleTweet","state","currentQuote","currentAuth","this","$","ajax","headers","Accept","url","success","jsonQuotes","JSON","parse","col","Math","floor","random","toString","padStart","css","quotes","length","setState","quote","author","attr","encodeURIComponent","id","src","class","onClick","title","target","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gMAGIA,E,wGADAC,EAAE,EAwESC,E,YArEX,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,YAAY,EAAKA,YAAYC,KAAjB,gBACjB,EAAKC,UAAU,EAAKA,UAAUD,KAAf,gBACf,EAAKE,YAAY,EAAKA,YAAYF,KAAjB,gBACjB,EAAKG,MAAM,CAGTC,aAAa,0DACbC,YAAY,eATE,E,iFAgBpBC,KAAKL,c,kCAKD,OAAOM,IAAEC,KAAK,CACZC,QAAS,CACPC,OAAQ,oBAEVC,IAAK,8FACLC,QAAS,SAASC,GACU,kBAAfA,IACTlB,EAAamB,KAAKC,MAAMF,S,oCAQ9B,IAAIG,EAAI,IAAD,OAAKC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAsBC,SAAS,IAAIC,SAAS,EAAG,IAC3Ed,IAAE,eAAee,IAAI,QAAQN,GAC7BT,IAAE,eAAee,IAAI,mBAAmBN,GACxCT,IAAE,cAAce,IAAI,mBAAmBN,GAEvCpB,EAAEqB,KAAKC,MAAMD,KAAKE,UAAUxB,EAAW4B,OAAOC,OAAO,IACrDlB,KAAKmB,SAAS,CACZrB,aAAaT,EAAW4B,OAAO3B,GAAG8B,MAClCrB,YAAYV,EAAW4B,OAAO3B,GAAG+B,W,oCAMnCpB,IAAE,gBAAgBqB,KAAK,OAAQ,8EAAgFC,mBAAmB,IAAMvB,KAAKH,MAAMC,aAAe,KAAOE,KAAKH,MAAME,gB,+BAGpL,OACE,yBAAKyB,GAAG,WAChB,4BAAQC,IAAI,oEAEJ,yBAAKD,GAAG,aACN,yBAAKA,GAAG,QAASxB,KAAKH,MAAMC,cAC5B,yBAAK0B,GAAG,UAAUxB,KAAKH,MAAME,aAC7B,4BAAQ2B,MAAM,sBAAsBF,GAAG,YAAYG,QAAS3B,KAAKP,aAAjE,aACA,uBAAGiC,MAAM,SAASF,GAAG,cAAcI,MAAM,oBAAoBC,OAAO,SAASF,QAAS3B,KAAKJ,aAC7F,uBAAG8B,MAAM,yB,GA/DWI,IAAMC,W,MCgBnBC,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAClB,4BAAQR,IAAI,oEAEV,kBAAC,EAAD,SCFYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5f992840.chunk.js","sourcesContent":["import $ from \"jquery\";\nimport React from 'react';\nlet i=0;\nlet quotesData;\n       class Quotes extends React.Component {\n    constructor(props){\n      super(props);\n      this.handleClick=this.handleClick.bind(this);\n      this.getQuotes=this.getQuotes.bind(this);\n      this.handleTweet=this.handleTweet.bind(this)\n      this.state={\n     \n        //i:0,\n        currentQuote:\"Start where you are. Use what you have. Do what you can\",\n        currentAuth:'Arthur Ashe'\n   \n\n      }\n    }\n\n componentDidMount() {\n  this.getQuotes();\n  \n  \n }\n    getQuotes() {\n      return $.ajax({\n        headers: {\n          Accept: \"application/json\"\n        },\n        url: 'https://raw.githubusercontent.com/ubermachine/react-randomQuoteGen/master/src/assets/quotes',\n        success: function(jsonQuotes) {\n          if (typeof jsonQuotes === 'string') {\n            quotesData = JSON.parse(jsonQuotes);\n    \n          }\n        }\n      });\n    }\n\n    handleClick(){\n      let col=`#${Math.floor(Math.random() * 0x1000000).toString(16).padStart(6, 0)}`\n      $(\".App-header\").css(\"color\",col );\n      $(\".App-header\").css(\"background-color\",col );\n      $(\"#new-quote\").css(\"background-color\",col );\n      \n      i=Math.floor(Math.random()*(quotesData.quotes.length-1))\n      this.setState({\n        currentQuote:quotesData.quotes[i].quote,\n        currentAuth:quotesData.quotes[i].author\n      });\n      \n      \n    }\n    handleTweet(){\n      $('#tweet-quote').attr('href', 'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + encodeURIComponent('\"' + this.state.currentQuote + '\" ' + this.state.currentAuth));\n    }\n    render(){\n      return(\n        <div id='wrapper'>\n<script src=\"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\"></script>\n\n        <div id='quote-box'>\n          <div id=\"text\" >{this.state.currentQuote}</div>\n          <div id=\"author\">{this.state.currentAuth}</div>\n          <button class='btn btn-info btn-sm' id=\"new-quote\" onClick={this.handleClick}>New quote</button>\n          <a class=\"button\" id=\"tweet-quote\" title=\"Tweet this quote!\" target=\"_blank\" onClick={this.handleTweet}>\n        <i class=\"fa fa-twitter\"></i>\n      </a>\n        </div>\n      </div>\n      )\n    }\n}\nexport default Quotes;\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport './App.css';\nimport Quotes from './components/quotes'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import $ from \"jQuery\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <script src=\"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\"></script>\n\n        <Quotes/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}